package com.irregulariti.crosswordle.logic

import android.util.Log
import kotlin.random.Random

var Words = setOf<String>("база", "параллелепипец", "ципочка", "кристаличсеская", "кринж", "рофлосборка",
    "андрей", "побрей", "киллометри", "рибинапару", "котлети", "афк", "антифриз", "соляра", "рот", "ебал", "этого", "казино",
    "блять", "блядь", "азаза")
//тут типа слова, пох, потом из бд сюда хуярить будет
fun Generate(){
    val s = mutableListOf(
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),
        mutableListOf("-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"),

        )

    fun tryToRazmestit(world: String, posX: Int, posY: Int, ori: Boolean, posB: Int): Boolean {
        //pos - позиция буквы для размещения; posB- позиция буквы в слове
        fun razmestit(world: List<String>) {
            //размещение слова

            if (ori) {
                var j = 0
                for (i in 0..s[posY].size-1) if (i > posX - posB && i <= posX - posB + world.size) {
                    //Log.i("", s[posY][i] + " " + world[j])
                    s[posY][i] = world[j]
                    j++
                }
            } else {
                var j = 0
                for (i in 0..s.size-1) if (i > posY - posB && i <= posY - posB + world.size) {
                    s[i][posX] = world[j]
                    j++
                }
            }
        }

        val qeqWait = world.split("").drop(1).dropLast(1)
        Log.i("", qeqWait.toString())
        val размер_массива_по_игрику = s.size
        val размер_массива_по_иксу = s[posY].size
        val размер_слова = qeqWait.size
        if (ori) {
            //проверка на влезание в массив
            if (posX < posB || размер_массива_по_иксу - posX < размер_слова - posB) return false
            var l = 0
            //проверка на неналезание буков друг на друга, и там либо буква совпадает, либо пиздец
            for (i in s[posY].subList(posX - posB, posX - posB + размер_слова)) {
                if (i != "-") if (qeqWait[l] != i) return false
                l++
            }
            //размещение слова
            razmestit(qeqWait)
            return true
        } else {
            //проверка на влезание в массив
            if (posY < posB || размер_массива_по_игрику - posY < размер_слова - posB) return false
            var l = 0
            //проверка на неналезание буков друг на друга, и там либо буква совпадает, либо пиздец
            val st = mutableListOf<String>()
            for (i in posY - posB..posY - posB + размер_слова) st.add(s[i][posY])
            for (i in st) {
                if (i != "-") if (qeqWait[l] != i) return false
                l++
            }
            //размещение слова
            razmestit(qeqWait)
            return true
        }
    }

    val tmt = Gena(8, 20)
    Log.i("", tmt.toString())
    val saloTriSkill = tmt[(0..tmt.size-1).random()] //last word
    var or = true // последняя ориентация t - горизонт f - верт
    var klinikaDurkaPirozok = Pair((s[0].size - saloTriSkill.length - 1) / 2, s.size / 2) // last koordinati
    //Log.i("", saloTriSkill + " " + (s[0].size - saloTriSkill.length - 1) / 2)
    tryToRazmestit(saloTriSkill, klinikaDurkaPirozok.first, klinikaDurkaPirozok.second, or, 0) //размещение первого длинного коренного слова
    or = !or
    //генерация веток
    var hz = false // передняя или задняя часть слова
    fun priamHz(){ // рандом на тру фолз, отвечает за ориентацию слова
        hz = (0.. 1).random() == 1
    }

    for (i in 0..(2..5).random()) {
        priamHz()
        if (hz) {
            //////
            var totka = (0..saloTriSkill.length / 2).random() // dot of word
            priamHz()// передняя или задняя часть слова
            var maxSlovo = (4..9).random() //выбирается макс длинна слова
            var slovar = Bukova(saloTriSkill[totka].toString(), Gena(0, maxSlovo).toMutableList(),if (hz) 0 else maxSlovo/2, if (hz) maxSlovo/2 else maxSlovo) //формируется словарь
            var j = slovar.random() // выбирается рандом слово из словаря
            //////
            while (!tryToRazmestit(j.first(), klinikaDurkaPirozok.first, klinikaDurkaPirozok.second, or, j.drop(1).random().toInt())){
                or = !or //s e mena pola
                //////
                totka = (0..saloTriSkill.length / 2).random() // dot of word
                priamHz()// передняя или задняя часть слова
                maxSlovo = (4..9).random() //выбирается макс длинна слова
                slovar = Bukova(saloTriSkill[totka].toString(), Gena(0, maxSlovo).toMutableList(),if (hz) 0 else maxSlovo/2, if (hz) maxSlovo/2 else maxSlovo) //формируется словарь
                j = slovar.random() // выбирается рандом слово из словаря
                //////
//надо перепроверить и реворкнуть (ne nado, dolzno rabotat, ya pomolilsa)
                }
        } else {
            var totka = (saloTriSkill.length / 2..saloTriSkill.length).random()
            priamHz()// передняя или задняя часть слова
            var maxSlovo = (4..9).random() //выбирается макс длинна слова
            var slovar = Bukova(saloTriSkill[totka].toString(), Gena(0, maxSlovo).toMutableList(),if (hz) 0 else maxSlovo/2, if (hz) maxSlovo/2 else maxSlovo) //формируется словарь
            var j = slovar.random() // выбирается рандом слово из словаря
            //////
            while (!tryToRazmestit(j.first(), klinikaDurkaPirozok.first, klinikaDurkaPirozok.second, or, j.drop(1).random().toInt())){
                or = !or //s e mena pola
                //////
                totka = (0..saloTriSkill.length / 2).random() // dot of word
                priamHz()// передняя или задняя часть слова
                maxSlovo = (4..9).random() //выбирается макс длинна слова
                slovar = Bukova(saloTriSkill[totka].toString(), Gena(0, maxSlovo).toMutableList(),if (hz) 0 else maxSlovo/2, if (hz) maxSlovo/2 else maxSlovo) //формируется словарь
                j = slovar.random() // выбирается рандом слово из словаря
                //////
//надо перепроверить и реворкнуть (ne nado, dolzno rabotat, ya pomolilsa)
            }
        }

    }

    nullPointerExchupchan(s)
}

fun nullPointerExchupchan(s: MutableList<MutableList<String>>) {
    var ё = 0
    Log.i("", List(20) { it + 1 }.toString())
    for (i in s) {
        ё++
        Log.i("", "$ё $i $ё")
    }
    Log.i("", List(40) { it + 1 }.toString())
}

fun Gena(i: Int, im: Int): List<String> {
    val Gena =
        mutableListOf<String>(); for (s in Words) if (s.length < im && s.length >= i) Gena.add(s)
    //возвращает массив слов опред длинны (>=i; <im) - индейцы
    return Gena
}

fun Bukova(b: String, digamma: MutableList<String>, minPos: Int, maxPos: Int): List<List<String>> {
    val Gena = mutableListOf<List<String>>()
    for (s in digamma) {
        when {
            s.length == minPos -> {
                if (s.last().toString() == b) {
                    Gena.add(listOf(s, s.length.toString()))
                }
            }

            s.length - 1 < minPos -> continue
            else -> if (s.substring(minPos, minOf(maxPos, s.length)).contains(b)) {
                val colen = mutableListOf(s)
                var ps = minPos
                for (j in s.substring(minPos, minOf(maxPos, s.length))) {
                    if (j.toString() == b) colen.add("$ps"); ps++
                }
                Gena.add(colen)
            }
        }
    }
    //>minPos, <=maxPos
    //возвращает массив слов с опред буковй на опред позициях c идексамми позиций этих букв в слове в радиусе искомого диапозона
    return Gena
}